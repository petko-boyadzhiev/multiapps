### Schema definition according to http://www.kuwata-lab.com/kwalify/
###    - For non-typed elements the default type "str" applies
###
### Schema versioning:
###    - This schema definition declares a semantic version (<major>.<minor>.<patch>) by its "name" element.
###    - A descriptor can express a schema version constraint by using the "_schema-version" element. See element description below
###
### Character set restrictions and captitalization:
###    - All schema element names shall be considered to be case sensitive. E.g., "modules" is a valid element name, "MODULES" is not valid.
###    - The string values of "ID" and all "name" keys defined in the schema must obey the following regular expression: \A[A-Za-z0-9_\-\.]+\z
###      This means, the complete string value must be composed out of upper-case letters A-Z, and/or lower-case letters a-z, and/or digits 0-9, and/or the underscore "_", and/or the minus dash "-", and and/or the period "."
###    - If the descriptor key path represents a file system path, then it must be interpreted as relative paths and must be path-traversal-safe. 
###      This means, path must then not begin with a slash "/", or backslash "\", or two periods "..".
###    - For the following names only a limited set of characters shall be used: (due to restrictions for environment variable names)
###         - all property names which will be used as lookup-names (e.g. names of environment variables)
###         - all group names 
###         The restriction is as follows (motivated by environment variable restrictions described at http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html):
###           - Names used consist solely of letters, digits, and the <underscore> ( '_' ) from the characters defined in Portable Character Set and do not begin with a digit.
###           - It is recommended preserve/use upper/lowercase for better readability, but to use names which stay unique when transformed into uppercase
###
### Other restrictions/constraints:
###    - Transformation of descriptors into a valid JSON document shall be possible.
 

desc: MTA DESCRIPTOR SCHEMA
name: com.sap.mta.mta-schema_2.2.0   # schema version must be extracted from here as there is no "version" element available

type: map
mapping:
   # Used to indicate to an MTA processing tool (e.g. a deployer), which schema version was taken as the base when authoring a 
   # descriptor. Schema versions have to follow the semantic versioning standard with the exception that trailing numbers 
   # (<minor>.<patch> or <patch>) can be omitted. A tool (e.g. a deployer) shall then insert the highest numbers it supports.
   _schema-version: {required: true}
   # A globally unique ID of this MTA. Unlimited string of unicode characters.
   ID: {required: true, pattern: '/^[A-Za-z0-9_\-\.]+$/'}
   # a non-translatable description of this MTA. This is not a text for application users
   description:     
   # application version. Shall follow the semantic versioning standard
   version: {required: true}
   # the provider or vendor of this software
   provider:  
   # a copyright statement from the provider    
   copyright:   
    
   # list of modules
   modules:
      type: seq
      sequence:
       - type: map
         mapping:
            # An MTA internal module name. Names need to be unique within the MTA scope
            name: {required: true, unique: true, pattern: '/^[A-Za-z0-9_\-\.]+$/'}
            # a globally unique type ID. Deployment tools will interpret this type ID
            type: {required: true}
            # a non-translatable description of this module. This is not a text for application users
            description:
            # A (file) path which identifies the location of module artifacts. 
            # The path schema may depend on the tool which interprets this descriptor. Path may not be limited to a file system path
            path:
            # properties shall be made available to the module at runtime
            properties: &properties
               type: map
               mapping: { =: {type: any} }
            # Parameters can be used to steer the behavior of tools (like a deployer) which interpret this descriptor. Parameters are not made available to the module at runtime
            parameters: &parameters
               type: map
               mapping: { =: {type: any} }
            # Build-parameters are specifically steering the behavior of build tools. 
            # Build-parameters ARE ONLY RELEVANT FOR DEVELOPMENT DESCRIPTORS (PRIO TO BUILD), NOT FOR DEPLOYMENT DESCRIPTORS!             
            build-parameters:
               type: map
               mapping: { =: {type: any} }
            # list of provided names (MTA internal)to which properties (= configuration data) can be attached
            provides:
               type:   seq
               sequence:
                - type: map
                  mapping:
                     # an MTA internal name which can used by a requiring module
                     name: {required: true, unique: true, pattern: '/^[A-Za-z0-9_\-\.]+$/'}
                     # property names and values make up the configuration data which is to be provided to requiring modules at runtime
                     properties: *properties
            # list of names either matching a resource name or a name provided by another module within the same MTA
            requires:
               type: seq
               sequence:
                - type: map
                  mapping:
                     # an MTA internal name which must match either a provided name, a resource name, or a module name within the same MTA
                     name: {required: true, unique: true, pattern: '/^[A-Za-z0-9_\-\.]+$/'}
                     # A group name which shall be use by a deployer to group properties for lookup by a module runtime.
                     # The group name is used as the lookup name
                     group:
                     # Required properties can be mapped from provided properties. 
                     # Provided property values can be accessed by "~{<provided-property-name>}". Such expressions can be part of an arbitrary string
                     properties: *properties
                     # Parameters can be used to influence the behavior of tools which interpret this descriptor. Parameters are not made available to the module at runtime
                     # Provided property values can be accessed by "~{<provided-property-name>}". Such expressions can be part of an arbitrary string
                     parameters: *parameters
   # Resource declarations. Resources can be anything required to run the application which is not provided by the application itself.
   resources:
      type: seq
      sequence:
       - type: map
         mapping:
            name: {required: true, unique: true, pattern: '/^[A-Za-z0-9_\-\.]+$/'}
            # A type of a resource. This type is interpreted by and must be known to the deployer. Resources can be untyped
            type:  
            # a non-translatable description of this resource. This is not a text for application users
            description:
            # property names and values make up the configuration data which is to be provided to requiring modules at runtime
            properties: *properties
            # Parameters can be used to influence the behavior of tools which interpret this descriptor. Parameters are not made available to requiring modules at runtime
            # Untyped resources cannot have parameters.
            parameters: *parameters

   # Global parameters 
   parameters: *parameters
   